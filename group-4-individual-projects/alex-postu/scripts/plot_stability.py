from SigProfilerExtractor import sigpro as sig
import matplotlib.pyplot as plt
import SigProfilerExtractor as spe_mod
import os
import csv
import numpy as np

"""
    Append the results generated by the script to a new csv.
    This is done to obtain statistics for multiple signatures.
    Note: this code is largely the same as the group one, do not consider it when grading the individual part :)
"""
def compute_aggregated_csv(modality):
    output_file = f'aggregated_solutions_{modality}.csv'
    with open(output_file, 'a') as final_csv:
        writer = csv.writer(final_csv)

        # Append header.
        with open(f"../results/results-2-signatures/{modality}/All_solutions_stat.csv", 'r') as output_csv:
            reader = csv.reader(output_csv)
            writer.writerow(next(reader))

        for i in range(1, 2):
            with open(f"../results/results-{i}-signatures/{modality}/All_solutions_stat.csv", 'r') as output_csv:
                reader = csv.reader(output_csv)

                next(reader, None)
                writer.writerow(next(reader))

    return output_file

"""
    Get the signatures number, stability and frobenius% from the csv.
"""
def get_csv_values(file):
    signatures = []
    stability = []
    frobenius = []

    with open(file, 'r') as data:
        reader = csv.reader(data)
        next(reader)

        for row in reader:
            signatures.append(int(row[0][:-1]))
            stability.append(float(row[1]))
            frobenius.append(float(row[6][:-1])/100)
        
    return (signatures, stability, frobenius)


"""
    Plot the lines according to the 3 variables, just like in the SigProfiler paper.
"""
def plot_lines(signatures, reproducibility, frobenius, modality):
    fig, ax1 = plt.subplots()

    # Plot x-axis for signatures number
    ax1.set_xlabel('Number of mutational signatures')
    ax1.set_xticks(np.arange(1, 16, 1.0))

    # Plot line corresponding to signature reproducibility.
    color = 'tab:red'
    ax1.set_ylabel('Signature reproducibility', color=color)
    ax1.plot(signatures, reproducibility, color=color, marker='o', label='Signature reproducibility')
    ax1.tick_params(axis='y', labelcolor=color)
    ax1.set_ylim(0.0, 1.05)
    ax1.set_xlim(1, 15)

    # Plot line corresponding to Frobenius reconstruction error.
    ax2 = ax1.twinx()
    color = 'tab:blue'
    ax2.set_ylabel('Frobenius reconstruction error', color=color)
    ax2.plot(signatures, frobenius, color=color, marker='s', label='Frobenius reconstruction error')
    ax2.tick_params(axis='y', labelcolor=color)

    plt.title('Mutational Signature Analysis')
    plt.tight_layout()

    plt.savefig(f"../results/stability_across_signatures_{modality}.jpg")


if __name__ == "__main__":
    modality = "SBS96"

    # Create signatures csv
    #signatures_csv = compute_aggregated_csv(modality)
    
    # Get necessary values from the csv 
    signatures, reproducibility, frobenius = get_csv_values("aggregated_solutions_SBS96.csv")

    # Create a plot based on these values.
    plot_lines(signatures, reproducibility, frobenius, modality)
    